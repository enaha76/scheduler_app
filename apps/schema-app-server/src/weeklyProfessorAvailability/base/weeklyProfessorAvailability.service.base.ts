/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WeeklyProfessorAvailability as PrismaWeeklyProfessorAvailability,
  Professor as PrismaProfessor,
  TimeSlot as PrismaTimeSlot,
  AcademicWeek as PrismaAcademicWeek,
} from "@prisma/client";

export class WeeklyProfessorAvailabilityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WeeklyProfessorAvailabilityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.weeklyProfessorAvailability.count(args);
  }

  async weeklyProfessorAvailabilities(
    args: Prisma.WeeklyProfessorAvailabilityFindManyArgs
  ): Promise<PrismaWeeklyProfessorAvailability[]> {
    return this.prisma.weeklyProfessorAvailability.findMany(args);
  }
  async weeklyProfessorAvailability(
    args: Prisma.WeeklyProfessorAvailabilityFindUniqueArgs
  ): Promise<PrismaWeeklyProfessorAvailability | null> {
    return this.prisma.weeklyProfessorAvailability.findUnique(args);
  }
  async createWeeklyProfessorAvailability(
    args: Prisma.WeeklyProfessorAvailabilityCreateArgs
  ): Promise<PrismaWeeklyProfessorAvailability> {
    return this.prisma.weeklyProfessorAvailability.create(args);
  }
  async updateWeeklyProfessorAvailability(
    args: Prisma.WeeklyProfessorAvailabilityUpdateArgs
  ): Promise<PrismaWeeklyProfessorAvailability> {
    return this.prisma.weeklyProfessorAvailability.update(args);
  }
  async deleteWeeklyProfessorAvailability(
    args: Prisma.WeeklyProfessorAvailabilityDeleteArgs
  ): Promise<PrismaWeeklyProfessorAvailability> {
    return this.prisma.weeklyProfessorAvailability.delete(args);
  }

  async getProfessor(parentId: number): Promise<PrismaProfessor | null> {
    return this.prisma.weeklyProfessorAvailability
      .findUnique({
        where: { id: parentId },
      })
      .professor();
  }

  async getTimeSlot(parentId: number): Promise<PrismaTimeSlot | null> {
    return this.prisma.weeklyProfessorAvailability
      .findUnique({
        where: { id: parentId },
      })
      .timeSlot();
  }

  async getWeek(parentId: number): Promise<PrismaAcademicWeek | null> {
    return this.prisma.weeklyProfessorAvailability
      .findUnique({
        where: { id: parentId },
      })
      .week();
  }
}
