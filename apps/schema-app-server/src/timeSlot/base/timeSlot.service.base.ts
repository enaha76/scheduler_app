/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TimeSlot as PrismaTimeSlot,
  ExceptionalClosure as PrismaExceptionalClosure,
  Schedule as PrismaSchedule,
  WeeklyProfessorAvailability as PrismaWeeklyProfessorAvailability,
} from "@prisma/client";

export class TimeSlotServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TimeSlotCountArgs, "select">): Promise<number> {
    return this.prisma.timeSlot.count(args);
  }

  async timeSlots(
    args: Prisma.TimeSlotFindManyArgs
  ): Promise<PrismaTimeSlot[]> {
    return this.prisma.timeSlot.findMany(args);
  }
  async timeSlot(
    args: Prisma.TimeSlotFindUniqueArgs
  ): Promise<PrismaTimeSlot | null> {
    return this.prisma.timeSlot.findUnique(args);
  }
  async createTimeSlot(
    args: Prisma.TimeSlotCreateArgs
  ): Promise<PrismaTimeSlot> {
    return this.prisma.timeSlot.create(args);
  }
  async updateTimeSlot(
    args: Prisma.TimeSlotUpdateArgs
  ): Promise<PrismaTimeSlot> {
    return this.prisma.timeSlot.update(args);
  }
  async deleteTimeSlot(
    args: Prisma.TimeSlotDeleteArgs
  ): Promise<PrismaTimeSlot> {
    return this.prisma.timeSlot.delete(args);
  }

  async findExceptionalClosures(
    parentId: number,
    args: Prisma.ExceptionalClosureFindManyArgs
  ): Promise<PrismaExceptionalClosure[]> {
    return this.prisma.timeSlot
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .exceptionalClosures(args);
  }

  async findSchedule(
    parentId: number,
    args: Prisma.ScheduleFindManyArgs
  ): Promise<PrismaSchedule[]> {
    return this.prisma.timeSlot
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .schedule(args);
  }

  async findWeeklyProfessorAvailability(
    parentId: number,
    args: Prisma.WeeklyProfessorAvailabilityFindManyArgs
  ): Promise<PrismaWeeklyProfessorAvailability[]> {
    return this.prisma.timeSlot
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .weeklyProfessorAvailability(args);
  }
}
