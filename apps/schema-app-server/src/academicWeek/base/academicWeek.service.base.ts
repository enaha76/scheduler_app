/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AcademicWeek as PrismaAcademicWeek,
  ExceptionalClosure as PrismaExceptionalClosure,
  Schedule as PrismaSchedule,
  WeeklyProfessorAvailability as PrismaWeeklyProfessorAvailability,
  WeeklyTeachingLoad as PrismaWeeklyTeachingLoad,
} from "@prisma/client";

export class AcademicWeekServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AcademicWeekCountArgs, "select">
  ): Promise<number> {
    return this.prisma.academicWeek.count(args);
  }

  async academicWeeks(
    args: Prisma.AcademicWeekFindManyArgs
  ): Promise<PrismaAcademicWeek[]> {
    return this.prisma.academicWeek.findMany(args);
  }
  async academicWeek(
    args: Prisma.AcademicWeekFindUniqueArgs
  ): Promise<PrismaAcademicWeek | null> {
    return this.prisma.academicWeek.findUnique(args);
  }
  async createAcademicWeek(
    args: Prisma.AcademicWeekCreateArgs
  ): Promise<PrismaAcademicWeek> {
    return this.prisma.academicWeek.create(args);
  }
  async updateAcademicWeek(
    args: Prisma.AcademicWeekUpdateArgs
  ): Promise<PrismaAcademicWeek> {
    return this.prisma.academicWeek.update(args);
  }
  async deleteAcademicWeek(
    args: Prisma.AcademicWeekDeleteArgs
  ): Promise<PrismaAcademicWeek> {
    return this.prisma.academicWeek.delete(args);
  }

  async findExceptionalClosures(
    parentId: number,
    args: Prisma.ExceptionalClosureFindManyArgs
  ): Promise<PrismaExceptionalClosure[]> {
    return this.prisma.academicWeek
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .exceptionalClosures(args);
  }

  async findSchedule(
    parentId: number,
    args: Prisma.ScheduleFindManyArgs
  ): Promise<PrismaSchedule[]> {
    return this.prisma.academicWeek
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .schedule(args);
  }

  async findWeeklyProfessorAvailability(
    parentId: number,
    args: Prisma.WeeklyProfessorAvailabilityFindManyArgs
  ): Promise<PrismaWeeklyProfessorAvailability[]> {
    return this.prisma.academicWeek
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .weeklyProfessorAvailability(args);
  }

  async findWeeklyTeachingLoads(
    parentId: number,
    args: Prisma.WeeklyTeachingLoadFindManyArgs
  ): Promise<PrismaWeeklyTeachingLoad[]> {
    return this.prisma.academicWeek
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .weeklyTeachingLoads(args);
  }
}
