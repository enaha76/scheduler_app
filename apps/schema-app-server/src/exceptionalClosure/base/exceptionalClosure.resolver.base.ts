/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ExceptionalClosure } from "./ExceptionalClosure";
import { ExceptionalClosureCountArgs } from "./ExceptionalClosureCountArgs";
import { ExceptionalClosureFindManyArgs } from "./ExceptionalClosureFindManyArgs";
import { ExceptionalClosureFindUniqueArgs } from "./ExceptionalClosureFindUniqueArgs";
import { CreateExceptionalClosureArgs } from "./CreateExceptionalClosureArgs";
import { UpdateExceptionalClosureArgs } from "./UpdateExceptionalClosureArgs";
import { DeleteExceptionalClosureArgs } from "./DeleteExceptionalClosureArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { AcademicWeek } from "../../academicWeek/base/AcademicWeek";
import { ExceptionalClosureService } from "../exceptionalClosure.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExceptionalClosure)
export class ExceptionalClosureResolverBase {
  constructor(
    protected readonly service: ExceptionalClosureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExceptionalClosure",
    action: "read",
    possession: "any",
  })
  async _exceptionalClosuresMeta(
    @graphql.Args() args: ExceptionalClosureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExceptionalClosure])
  @nestAccessControl.UseRoles({
    resource: "ExceptionalClosure",
    action: "read",
    possession: "any",
  })
  async exceptionalClosures(
    @graphql.Args() args: ExceptionalClosureFindManyArgs
  ): Promise<ExceptionalClosure[]> {
    return this.service.exceptionalClosures(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExceptionalClosure, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExceptionalClosure",
    action: "read",
    possession: "own",
  })
  async exceptionalClosure(
    @graphql.Args() args: ExceptionalClosureFindUniqueArgs
  ): Promise<ExceptionalClosure | null> {
    const result = await this.service.exceptionalClosure(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExceptionalClosure)
  @nestAccessControl.UseRoles({
    resource: "ExceptionalClosure",
    action: "create",
    possession: "any",
  })
  async createExceptionalClosure(
    @graphql.Args() args: CreateExceptionalClosureArgs
  ): Promise<ExceptionalClosure> {
    return await this.service.createExceptionalClosure({
      ...args,
      data: {
        ...args.data,

        timeSlot: {
          connect: args.data.timeSlot,
        },

        week: {
          connect: args.data.week,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExceptionalClosure)
  @nestAccessControl.UseRoles({
    resource: "ExceptionalClosure",
    action: "update",
    possession: "any",
  })
  async updateExceptionalClosure(
    @graphql.Args() args: UpdateExceptionalClosureArgs
  ): Promise<ExceptionalClosure | null> {
    try {
      return await this.service.updateExceptionalClosure({
        ...args,
        data: {
          ...args.data,

          timeSlot: {
            connect: args.data.timeSlot,
          },

          week: {
            connect: args.data.week,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExceptionalClosure)
  @nestAccessControl.UseRoles({
    resource: "ExceptionalClosure",
    action: "delete",
    possession: "any",
  })
  async deleteExceptionalClosure(
    @graphql.Args() args: DeleteExceptionalClosureArgs
  ): Promise<ExceptionalClosure | null> {
    try {
      return await this.service.deleteExceptionalClosure(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TimeSlot, {
    nullable: true,
    name: "timeSlot",
  })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  async getTimeSlot(
    @graphql.Parent() parent: ExceptionalClosure
  ): Promise<TimeSlot | null> {
    const result = await this.service.getTimeSlot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AcademicWeek, {
    nullable: true,
    name: "week",
  })
  @nestAccessControl.UseRoles({
    resource: "AcademicWeek",
    action: "read",
    possession: "any",
  })
  async getWeek(
    @graphql.Parent() parent: ExceptionalClosure
  ): Promise<AcademicWeek | null> {
    const result = await this.service.getWeek(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
