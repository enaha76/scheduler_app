/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WeeklyTeachingLoad as PrismaWeeklyTeachingLoad,
  Course as PrismaCourse,
  Group as PrismaGroup,
  AcademicWeek as PrismaAcademicWeek,
} from "@prisma/client";

export class WeeklyTeachingLoadServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WeeklyTeachingLoadCountArgs, "select">
  ): Promise<number> {
    return this.prisma.weeklyTeachingLoad.count(args);
  }

  async weeklyTeachingLoads(
    args: Prisma.WeeklyTeachingLoadFindManyArgs
  ): Promise<PrismaWeeklyTeachingLoad[]> {
    return this.prisma.weeklyTeachingLoad.findMany(args);
  }
  async weeklyTeachingLoad(
    args: Prisma.WeeklyTeachingLoadFindUniqueArgs
  ): Promise<PrismaWeeklyTeachingLoad | null> {
    return this.prisma.weeklyTeachingLoad.findUnique(args);
  }
  async createWeeklyTeachingLoad(
    args: Prisma.WeeklyTeachingLoadCreateArgs
  ): Promise<PrismaWeeklyTeachingLoad> {
    return this.prisma.weeklyTeachingLoad.create(args);
  }
  async updateWeeklyTeachingLoad(
    args: Prisma.WeeklyTeachingLoadUpdateArgs
  ): Promise<PrismaWeeklyTeachingLoad> {
    return this.prisma.weeklyTeachingLoad.update(args);
  }
  async deleteWeeklyTeachingLoad(
    args: Prisma.WeeklyTeachingLoadDeleteArgs
  ): Promise<PrismaWeeklyTeachingLoad> {
    return this.prisma.weeklyTeachingLoad.delete(args);
  }

  async getCourse(parentId: number): Promise<PrismaCourse | null> {
    return this.prisma.weeklyTeachingLoad
      .findUnique({
        where: { id: parentId },
      })
      .course();
  }

  async getGroup(parentId: number): Promise<PrismaGroup | null> {
    return this.prisma.weeklyTeachingLoad
      .findUnique({
        where: { id: parentId },
      })
      .group();
  }

  async getWeek(parentId: number): Promise<PrismaAcademicWeek | null> {
    return this.prisma.weeklyTeachingLoad
      .findUnique({
        where: { id: parentId },
      })
      .week();
  }
}
