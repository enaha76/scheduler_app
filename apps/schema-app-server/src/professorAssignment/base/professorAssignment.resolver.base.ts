/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProfessorAssignment } from "./ProfessorAssignment";
import { ProfessorAssignmentCountArgs } from "./ProfessorAssignmentCountArgs";
import { ProfessorAssignmentFindManyArgs } from "./ProfessorAssignmentFindManyArgs";
import { ProfessorAssignmentFindUniqueArgs } from "./ProfessorAssignmentFindUniqueArgs";
import { CreateProfessorAssignmentArgs } from "./CreateProfessorAssignmentArgs";
import { UpdateProfessorAssignmentArgs } from "./UpdateProfessorAssignmentArgs";
import { DeleteProfessorAssignmentArgs } from "./DeleteProfessorAssignmentArgs";
import { Course } from "../../course/base/Course";
import { Group } from "../../group/base/Group";
import { Professor } from "../../professor/base/Professor";
import { ProfessorAssignmentService } from "../professorAssignment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProfessorAssignment)
export class ProfessorAssignmentResolverBase {
  constructor(
    protected readonly service: ProfessorAssignmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProfessorAssignment",
    action: "read",
    possession: "any",
  })
  async _professorAssignmentsMeta(
    @graphql.Args() args: ProfessorAssignmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProfessorAssignment])
  @nestAccessControl.UseRoles({
    resource: "ProfessorAssignment",
    action: "read",
    possession: "any",
  })
  async professorAssignments(
    @graphql.Args() args: ProfessorAssignmentFindManyArgs
  ): Promise<ProfessorAssignment[]> {
    return this.service.professorAssignments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProfessorAssignment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProfessorAssignment",
    action: "read",
    possession: "own",
  })
  async professorAssignment(
    @graphql.Args() args: ProfessorAssignmentFindUniqueArgs
  ): Promise<ProfessorAssignment | null> {
    const result = await this.service.professorAssignment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProfessorAssignment)
  @nestAccessControl.UseRoles({
    resource: "ProfessorAssignment",
    action: "create",
    possession: "any",
  })
  async createProfessorAssignment(
    @graphql.Args() args: CreateProfessorAssignmentArgs
  ): Promise<ProfessorAssignment> {
    return await this.service.createProfessorAssignment({
      ...args,
      data: {
        ...args.data,

        course: {
          connect: args.data.course,
        },

        group: {
          connect: args.data.group,
        },

        professor: {
          connect: args.data.professor,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProfessorAssignment)
  @nestAccessControl.UseRoles({
    resource: "ProfessorAssignment",
    action: "update",
    possession: "any",
  })
  async updateProfessorAssignment(
    @graphql.Args() args: UpdateProfessorAssignmentArgs
  ): Promise<ProfessorAssignment | null> {
    try {
      return await this.service.updateProfessorAssignment({
        ...args,
        data: {
          ...args.data,

          course: {
            connect: args.data.course,
          },

          group: {
            connect: args.data.group,
          },

          professor: {
            connect: args.data.professor,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProfessorAssignment)
  @nestAccessControl.UseRoles({
    resource: "ProfessorAssignment",
    action: "delete",
    possession: "any",
  })
  async deleteProfessorAssignment(
    @graphql.Args() args: DeleteProfessorAssignmentArgs
  ): Promise<ProfessorAssignment | null> {
    try {
      return await this.service.deleteProfessorAssignment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async getCourse(
    @graphql.Parent() parent: ProfessorAssignment
  ): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async getGroup(
    @graphql.Parent() parent: ProfessorAssignment
  ): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Professor, {
    nullable: true,
    name: "professor",
  })
  @nestAccessControl.UseRoles({
    resource: "Professor",
    action: "read",
    possession: "any",
  })
  async getProfessor(
    @graphql.Parent() parent: ProfessorAssignment
  ): Promise<Professor | null> {
    const result = await this.service.getProfessor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
