/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProfessorAssignment as PrismaProfessorAssignment,
  Course as PrismaCourse,
  Group as PrismaGroup,
  Professor as PrismaProfessor,
} from "@prisma/client";

export class ProfessorAssignmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProfessorAssignmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.professorAssignment.count(args);
  }

  async professorAssignments(
    args: Prisma.ProfessorAssignmentFindManyArgs
  ): Promise<PrismaProfessorAssignment[]> {
    return this.prisma.professorAssignment.findMany(args);
  }
  async professorAssignment(
    args: Prisma.ProfessorAssignmentFindUniqueArgs
  ): Promise<PrismaProfessorAssignment | null> {
    return this.prisma.professorAssignment.findUnique(args);
  }
  async createProfessorAssignment(
    args: Prisma.ProfessorAssignmentCreateArgs
  ): Promise<PrismaProfessorAssignment> {
    return this.prisma.professorAssignment.create(args);
  }
  async updateProfessorAssignment(
    args: Prisma.ProfessorAssignmentUpdateArgs
  ): Promise<PrismaProfessorAssignment> {
    return this.prisma.professorAssignment.update(args);
  }
  async deleteProfessorAssignment(
    args: Prisma.ProfessorAssignmentDeleteArgs
  ): Promise<PrismaProfessorAssignment> {
    return this.prisma.professorAssignment.delete(args);
  }

  async getCourse(parentId: number): Promise<PrismaCourse | null> {
    return this.prisma.professorAssignment
      .findUnique({
        where: { id: parentId },
      })
      .course();
  }

  async getGroup(parentId: number): Promise<PrismaGroup | null> {
    return this.prisma.professorAssignment
      .findUnique({
        where: { id: parentId },
      })
      .group();
  }

  async getProfessor(parentId: number): Promise<PrismaProfessor | null> {
    return this.prisma.professorAssignment
      .findUnique({
        where: { id: parentId },
      })
      .professor();
  }
}
