/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Professor } from "./Professor";
import { ProfessorCountArgs } from "./ProfessorCountArgs";
import { ProfessorFindManyArgs } from "./ProfessorFindManyArgs";
import { ProfessorFindUniqueArgs } from "./ProfessorFindUniqueArgs";
import { CreateProfessorArgs } from "./CreateProfessorArgs";
import { UpdateProfessorArgs } from "./UpdateProfessorArgs";
import { DeleteProfessorArgs } from "./DeleteProfessorArgs";
import { ProfessorAssignmentFindManyArgs } from "../../professorAssignment/base/ProfessorAssignmentFindManyArgs";
import { ProfessorAssignment } from "../../professorAssignment/base/ProfessorAssignment";
import { ScheduleFindManyArgs } from "../../schedule/base/ScheduleFindManyArgs";
import { Schedule } from "../../schedule/base/Schedule";
import { WeeklyProfessorAvailabilityFindManyArgs } from "../../weeklyProfessorAvailability/base/WeeklyProfessorAvailabilityFindManyArgs";
import { WeeklyProfessorAvailability } from "../../weeklyProfessorAvailability/base/WeeklyProfessorAvailability";
import { ProfessorService } from "../professor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Professor)
export class ProfessorResolverBase {
  constructor(
    protected readonly service: ProfessorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Professor",
    action: "read",
    possession: "any",
  })
  async _professorsMeta(
    @graphql.Args() args: ProfessorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Professor])
  @nestAccessControl.UseRoles({
    resource: "Professor",
    action: "read",
    possession: "any",
  })
  async professors(
    @graphql.Args() args: ProfessorFindManyArgs
  ): Promise<Professor[]> {
    return this.service.professors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Professor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Professor",
    action: "read",
    possession: "own",
  })
  async professor(
    @graphql.Args() args: ProfessorFindUniqueArgs
  ): Promise<Professor | null> {
    const result = await this.service.professor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Professor)
  @nestAccessControl.UseRoles({
    resource: "Professor",
    action: "create",
    possession: "any",
  })
  async createProfessor(
    @graphql.Args() args: CreateProfessorArgs
  ): Promise<Professor> {
    return await this.service.createProfessor({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Professor)
  @nestAccessControl.UseRoles({
    resource: "Professor",
    action: "update",
    possession: "any",
  })
  async updateProfessor(
    @graphql.Args() args: UpdateProfessorArgs
  ): Promise<Professor | null> {
    try {
      return await this.service.updateProfessor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Professor)
  @nestAccessControl.UseRoles({
    resource: "Professor",
    action: "delete",
    possession: "any",
  })
  async deleteProfessor(
    @graphql.Args() args: DeleteProfessorArgs
  ): Promise<Professor | null> {
    try {
      return await this.service.deleteProfessor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProfessorAssignment], {
    name: "professorAssignments",
  })
  @nestAccessControl.UseRoles({
    resource: "ProfessorAssignment",
    action: "read",
    possession: "any",
  })
  async findProfessorAssignments(
    @graphql.Parent() parent: Professor,
    @graphql.Args() args: ProfessorAssignmentFindManyArgs
  ): Promise<ProfessorAssignment[]> {
    const results = await this.service.findProfessorAssignments(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Schedule], { name: "schedule" })
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "read",
    possession: "any",
  })
  async findSchedule(
    @graphql.Parent() parent: Professor,
    @graphql.Args() args: ScheduleFindManyArgs
  ): Promise<Schedule[]> {
    const results = await this.service.findSchedule(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WeeklyProfessorAvailability], {
    name: "weeklyProfessorAvailability",
  })
  @nestAccessControl.UseRoles({
    resource: "WeeklyProfessorAvailability",
    action: "read",
    possession: "any",
  })
  async findWeeklyProfessorAvailability(
    @graphql.Parent() parent: Professor,
    @graphql.Args() args: WeeklyProfessorAvailabilityFindManyArgs
  ): Promise<WeeklyProfessorAvailability[]> {
    const results = await this.service.findWeeklyProfessorAvailability(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
