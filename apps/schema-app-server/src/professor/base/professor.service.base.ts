/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Professor as PrismaProfessor,
  ProfessorAssignment as PrismaProfessorAssignment,
  Schedule as PrismaSchedule,
  WeeklyProfessorAvailability as PrismaWeeklyProfessorAvailability,
} from "@prisma/client";

export class ProfessorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProfessorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.professor.count(args);
  }

  async professors(
    args: Prisma.ProfessorFindManyArgs
  ): Promise<PrismaProfessor[]> {
    return this.prisma.professor.findMany(args);
  }
  async professor(
    args: Prisma.ProfessorFindUniqueArgs
  ): Promise<PrismaProfessor | null> {
    return this.prisma.professor.findUnique(args);
  }
  async createProfessor(
    args: Prisma.ProfessorCreateArgs
  ): Promise<PrismaProfessor> {
    return this.prisma.professor.create(args);
  }
  async updateProfessor(
    args: Prisma.ProfessorUpdateArgs
  ): Promise<PrismaProfessor> {
    return this.prisma.professor.update(args);
  }
  async deleteProfessor(
    args: Prisma.ProfessorDeleteArgs
  ): Promise<PrismaProfessor> {
    return this.prisma.professor.delete(args);
  }

  async findProfessorAssignments(
    parentId: number,
    args: Prisma.ProfessorAssignmentFindManyArgs
  ): Promise<PrismaProfessorAssignment[]> {
    return this.prisma.professor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .professorAssignments(args);
  }

  async findSchedule(
    parentId: number,
    args: Prisma.ScheduleFindManyArgs
  ): Promise<PrismaSchedule[]> {
    return this.prisma.professor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .schedule(args);
  }

  async findWeeklyProfessorAvailability(
    parentId: number,
    args: Prisma.WeeklyProfessorAvailabilityFindManyArgs
  ): Promise<PrismaWeeklyProfessorAvailability[]> {
    return this.prisma.professor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .weeklyProfessorAvailability(args);
  }
}
