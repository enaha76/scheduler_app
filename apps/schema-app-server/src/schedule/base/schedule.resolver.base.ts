/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Schedule } from "./Schedule";
import { ScheduleCountArgs } from "./ScheduleCountArgs";
import { ScheduleFindManyArgs } from "./ScheduleFindManyArgs";
import { ScheduleFindUniqueArgs } from "./ScheduleFindUniqueArgs";
import { CreateScheduleArgs } from "./CreateScheduleArgs";
import { UpdateScheduleArgs } from "./UpdateScheduleArgs";
import { DeleteScheduleArgs } from "./DeleteScheduleArgs";
import { Course } from "../../course/base/Course";
import { Group } from "../../group/base/Group";
import { Professor } from "../../professor/base/Professor";
import { Room } from "../../room/base/Room";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { AcademicWeek } from "../../academicWeek/base/AcademicWeek";
import { ScheduleService } from "../schedule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Schedule)
export class ScheduleResolverBase {
  constructor(
    protected readonly service: ScheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "read",
    possession: "any",
  })
  async _schedulesMeta(
    @graphql.Args() args: ScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Schedule])
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "read",
    possession: "any",
  })
  async schedules(
    @graphql.Args() args: ScheduleFindManyArgs
  ): Promise<Schedule[]> {
    return this.service.schedules(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Schedule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "read",
    possession: "own",
  })
  async schedule(
    @graphql.Args() args: ScheduleFindUniqueArgs
  ): Promise<Schedule | null> {
    const result = await this.service.schedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Schedule)
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "create",
    possession: "any",
  })
  async createSchedule(
    @graphql.Args() args: CreateScheduleArgs
  ): Promise<Schedule> {
    return await this.service.createSchedule({
      ...args,
      data: {
        ...args.data,

        course: {
          connect: args.data.course,
        },

        group: {
          connect: args.data.group,
        },

        professor: {
          connect: args.data.professor,
        },

        room: {
          connect: args.data.room,
        },

        timeSlot: {
          connect: args.data.timeSlot,
        },

        week: {
          connect: args.data.week,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Schedule)
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "update",
    possession: "any",
  })
  async updateSchedule(
    @graphql.Args() args: UpdateScheduleArgs
  ): Promise<Schedule | null> {
    try {
      return await this.service.updateSchedule({
        ...args,
        data: {
          ...args.data,

          course: {
            connect: args.data.course,
          },

          group: {
            connect: args.data.group,
          },

          professor: {
            connect: args.data.professor,
          },

          room: {
            connect: args.data.room,
          },

          timeSlot: {
            connect: args.data.timeSlot,
          },

          week: {
            connect: args.data.week,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Schedule)
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "delete",
    possession: "any",
  })
  async deleteSchedule(
    @graphql.Args() args: DeleteScheduleArgs
  ): Promise<Schedule | null> {
    try {
      return await this.service.deleteSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async getCourse(@graphql.Parent() parent: Schedule): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async getGroup(@graphql.Parent() parent: Schedule): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Professor, {
    nullable: true,
    name: "professor",
  })
  @nestAccessControl.UseRoles({
    resource: "Professor",
    action: "read",
    possession: "any",
  })
  async getProfessor(
    @graphql.Parent() parent: Schedule
  ): Promise<Professor | null> {
    const result = await this.service.getProfessor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Room, {
    nullable: true,
    name: "room",
  })
  @nestAccessControl.UseRoles({
    resource: "Room",
    action: "read",
    possession: "any",
  })
  async getRoom(@graphql.Parent() parent: Schedule): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TimeSlot, {
    nullable: true,
    name: "timeSlot",
  })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  async getTimeSlot(
    @graphql.Parent() parent: Schedule
  ): Promise<TimeSlot | null> {
    const result = await this.service.getTimeSlot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AcademicWeek, {
    nullable: true,
    name: "week",
  })
  @nestAccessControl.UseRoles({
    resource: "AcademicWeek",
    action: "read",
    possession: "any",
  })
  async getWeek(
    @graphql.Parent() parent: Schedule
  ): Promise<AcademicWeek | null> {
    const result = await this.service.getWeek(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
