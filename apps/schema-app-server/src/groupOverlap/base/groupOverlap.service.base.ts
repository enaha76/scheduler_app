/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GroupOverlap as PrismaGroupOverlap,
  Group as PrismaGroup,
} from "@prisma/client";

export class GroupOverlapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GroupOverlapCountArgs, "select">
  ): Promise<number> {
    return this.prisma.groupOverlap.count(args);
  }

  async groupOverlaps(
    args: Prisma.GroupOverlapFindManyArgs
  ): Promise<PrismaGroupOverlap[]> {
    return this.prisma.groupOverlap.findMany(args);
  }
  async groupOverlap(
    args: Prisma.GroupOverlapFindUniqueArgs
  ): Promise<PrismaGroupOverlap | null> {
    return this.prisma.groupOverlap.findUnique(args);
  }
  async createGroupOverlap(
    args: Prisma.GroupOverlapCreateArgs
  ): Promise<PrismaGroupOverlap> {
    return this.prisma.groupOverlap.create(args);
  }
  async updateGroupOverlap(
    args: Prisma.GroupOverlapUpdateArgs
  ): Promise<PrismaGroupOverlap> {
    return this.prisma.groupOverlap.update(args);
  }
  async deleteGroupOverlap(
    args: Prisma.GroupOverlapDeleteArgs
  ): Promise<PrismaGroupOverlap> {
    return this.prisma.groupOverlap.delete(args);
  }

  async getGroup1(parentId: number): Promise<PrismaGroup | null> {
    return this.prisma.groupOverlap
      .findUnique({
        where: { id: parentId },
      })
      .group1();
  }

  async getGroup2(parentId: number): Promise<PrismaGroup | null> {
    return this.prisma.groupOverlap
      .findUnique({
        where: { id: parentId },
      })
      .group2();
  }
}
