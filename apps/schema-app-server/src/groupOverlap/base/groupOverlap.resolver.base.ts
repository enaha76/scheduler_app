/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GroupOverlap } from "./GroupOverlap";
import { GroupOverlapCountArgs } from "./GroupOverlapCountArgs";
import { GroupOverlapFindManyArgs } from "./GroupOverlapFindManyArgs";
import { GroupOverlapFindUniqueArgs } from "./GroupOverlapFindUniqueArgs";
import { CreateGroupOverlapArgs } from "./CreateGroupOverlapArgs";
import { UpdateGroupOverlapArgs } from "./UpdateGroupOverlapArgs";
import { DeleteGroupOverlapArgs } from "./DeleteGroupOverlapArgs";
import { Group } from "../../group/base/Group";
import { GroupOverlapService } from "../groupOverlap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GroupOverlap)
export class GroupOverlapResolverBase {
  constructor(
    protected readonly service: GroupOverlapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GroupOverlap",
    action: "read",
    possession: "any",
  })
  async _groupOverlapsMeta(
    @graphql.Args() args: GroupOverlapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GroupOverlap])
  @nestAccessControl.UseRoles({
    resource: "GroupOverlap",
    action: "read",
    possession: "any",
  })
  async groupOverlaps(
    @graphql.Args() args: GroupOverlapFindManyArgs
  ): Promise<GroupOverlap[]> {
    return this.service.groupOverlaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GroupOverlap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GroupOverlap",
    action: "read",
    possession: "own",
  })
  async groupOverlap(
    @graphql.Args() args: GroupOverlapFindUniqueArgs
  ): Promise<GroupOverlap | null> {
    const result = await this.service.groupOverlap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupOverlap)
  @nestAccessControl.UseRoles({
    resource: "GroupOverlap",
    action: "create",
    possession: "any",
  })
  async createGroupOverlap(
    @graphql.Args() args: CreateGroupOverlapArgs
  ): Promise<GroupOverlap> {
    return await this.service.createGroupOverlap({
      ...args,
      data: {
        ...args.data,

        group1: {
          connect: args.data.group1,
        },

        group2: {
          connect: args.data.group2,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GroupOverlap)
  @nestAccessControl.UseRoles({
    resource: "GroupOverlap",
    action: "update",
    possession: "any",
  })
  async updateGroupOverlap(
    @graphql.Args() args: UpdateGroupOverlapArgs
  ): Promise<GroupOverlap | null> {
    try {
      return await this.service.updateGroupOverlap({
        ...args,
        data: {
          ...args.data,

          group1: {
            connect: args.data.group1,
          },

          group2: {
            connect: args.data.group2,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GroupOverlap)
  @nestAccessControl.UseRoles({
    resource: "GroupOverlap",
    action: "delete",
    possession: "any",
  })
  async deleteGroupOverlap(
    @graphql.Args() args: DeleteGroupOverlapArgs
  ): Promise<GroupOverlap | null> {
    try {
      return await this.service.deleteGroupOverlap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group1",
  })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async getGroup1(
    @graphql.Parent() parent: GroupOverlap
  ): Promise<Group | null> {
    const result = await this.service.getGroup1(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group2",
  })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async getGroup2(
    @graphql.Parent() parent: GroupOverlap
  ): Promise<Group | null> {
    const result = await this.service.getGroup2(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
